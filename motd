#!/usr/bin/env python

from __future__ import print_function
import os
import multiprocessing
import subprocess
import shlex
import platform
import traceback

numbers = {
    2: "Two",
    4: "Four",
    8: "Eight",
   10: "Ten",
   12: "Twelve",
   14: "Fourteen",
   16: "Sixteen"
}
def num2words(num):
    if num in numbers:
        return numbers[num]
    else:
        return num

def mb2human(mb):
    mb = float(mb)
    if mb > 1024:
        return "{0:.2f}GB".format(mb/1024)
    else:
        return "{0}MB".format(mb)

# first line: system information
op, name, kernel, compiled, arch = os.uname()
uname = "{0} Version {1} {2}".format(op, kernel, arch).center(78)
uname = list(uname)
for index in range(55,57):
    if uname[index] == " ":
        uname[index] = "[1;36;40m#[1;37;40m" 
uname = "".join(uname)

# second line: cpu information + total RAM
cpu_count = num2words(multiprocessing.cpu_count())
cpu_type_raw = platform.processor()
cpu_type = "{clock} {string}".format(
    string = cpu_type_raw.split(" CPU")[0],
    clock  = cpu_type_raw.split("@ ")[1]
)
stdout,stderr = subprocess.Popen(
    shlex.split("free -m"),
    stdout=subprocess.PIPE
).communicate()
memline = stdout.decode("utf8").split("\n")[1].split()
swapline = stdout.decode("utf8").split("\n")[3].split()
totalmemory = mb2human(memline[1]) 
info = "{cpu_count} {cpu_type} Processors, {totalmemory} RAM".format(**locals()).center(78)
info = list(info)
for index in [50,51,54,55]:
    if info[index] == " ":
        info[index] = "[1;36;40m#[1;37;40m" 
info = "".join(info)

# third name: system hostname
hostname = name.center(78)
hostname = list(hostname)
for index in range(51,55):
    if hostname[index] == " ":
        hostname[index] = "[1;36;40m#[1;37;40m"
hostname = "".join(hostname)

# fourth line: disk usage 
stdout,stderr = subprocess.Popen(
    shlex.split("df -h"),
    stdout=subprocess.PIPE
).communicate()
disklines = []
for line in stdout.decode("utf8").split("\n")[1:]:
    if line:
        fs, size, used, avail, perc, mount = line.split()
        if "/home" in mount:
            #use this disk!
            usage = "{used} / {size} [{perc}]".format(
                used = used.rjust(6),
                size = size.ljust(6),
                perc = perc
            ).rjust(20)
            mountpoint = "{0}:".format(mount).ljust(10)
            diskline = "{mountpoint} {usage}".format(**locals()).center(78)
            disklines.append(diskline)
disklines = "\n".join(["[1;37;40m{0}[0m".format(x) for x in disklines])

# fifth line: mem usage
null, total, used, free, shared, buffers, cached = memline
perc = int(float(used)/float(total))
meminfo = "{used} / {total} [{perc}%]".format(
    used = "{0}M".format(used).rjust(6),
    total = "{0}M".format(total).ljust(6),
    perc = perc
).rjust(20)
memline = "{string} {meminfo}".format(
    string = "RAM:".ljust(10),
    meminfo = meminfo
).center(78)

# sixth line: swap usage
null, total, used, free = swapline
perc = int(float(used)/float(total))
swapinfo = "{used} / {total} [{perc}%]".format(
    used = "{0}M".format(used).rjust(6),
    total = "{0}M".format(total).ljust(6),
    perc = perc
).rjust(20)
swapline = "{string} {swapinfo}".format(
    string = "Swap:".ljust(10),
    swapinfo = swapinfo
).center(78)

# seventh to eleventh lines: network usage
# seventh:  description of data
# eighth:   rx
# ninth:    tx
# tenth:    tot
# eleventh: avg

#check if vnstat is valid
stdout,stderr = subprocess.Popen(
    shlex.split("vnstat -m"),
    stdout=subprocess.PIPE
).communicate()
try:
    parsed = stdout.decode("utf8").split("\n")
    iface = parsed[1].split()[0]
    month, year, rx1, rx2, null2, tx1, tx2, null3, tot1, tot2, null4, avg1, avg2 = parsed[-4].split() 
    rx = "{0} {1} {2}".format("rx".ljust(4), rx1.rjust(9), rx2.ljust(6)).center(80)
    tx = "{0} {1} {2}".format("tx".ljust(4), tx1.rjust(9), tx2.ljust(6)).center(80)
    tot = "{0} {1} {2}".format("tot".ljust(5), tot1.rjust(8), tot2.ljust(6)).center(80)
    avg = "{0} {1} {2}".format("avg".ljust(5), avg1.rjust(8), avg2.ljust(6)).center(80)
    netdescription = "Traffic on {0} for {1} {2}".format(iface, month, year).center(78)
    netlines = "\n".join(["[1;37;40m{0}[0m".format(x) for x in [netdescription, rx, tx, tot, avg]])
except:
    netlines = "No network data could be found, is vnstat installed?".center(78)

logo = """
[1;36;40m                 [31m#######[36m                                          [0;30;47moOOOo[40m
[1;36;40m                [31m#####[36m                                            [0;30;47mOO###OO[40m
[1;36;40m               [31m###[36m                                               [0;30;47m##[1;37m0[0;30;47m#[1;37m0[0;30;47m##[40m
[1;36;40m  ####        [31m##[36m#                                               [0;30;47mo#[1;33;40m#####[0;30;47m#o[40m
[1;36;40m   ####      [31m##[36m##   ######                                     [0;30;47mO#  [1;33;40m###[0;30;47m  #O[40m
[1;36;40m   ## ##    [31m##[36m ##   ##    ##    ####   ### ####    ####       [0;30;47mO#         #O[40m
[1;36;40m   ##  ##  [31m##[36m  ##   ##     ##  ##  ##   ###  ##   ##  ##     [0;30;47mO#           #O[40m
[1;36;40m   ##    ##[31m#[36m   ##   ##    ##  ########  ##   ##  ##    ##    [0;30;47mO#           ##O[40m
[1;36;40m   ##     #    ##   ######   ##         ##   ##  ##    ##   [33m##[0;30;47m#           ##[1;33;40m#[40m
[1;36;40m   ##          ##   ##       ##         ##   ##   ##   ## [33m######[0;30;47m#       #[1;33;40m######[40m
[1;36;40m   ##          ##   ##        ##        ##   ##    ###### [33m#######[0;30;47m#     #[1;33;40m#######[40m
[1;36;40m  ####        #### ####        #####   #### ####       ##   [33m######[0;30;47m#####[1;33;40m######[0;30;40m
[1;36;40m                                                       ##
[1;37;40m{uname}
[1;37;40m{info}
[1;37;40m{hostname}

{disklines}
[1;37;40m{memline}
[1;37;40m{swapline}

{netlines}[0m[255D
""".format(**locals())
print(logo)
